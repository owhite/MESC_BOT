# List of terminal commands that can used with set or get
schema_version: 1
description: list commands to use with get (always) and set (sometimes)


term_commands:
- name: adc1
  category: adc
  description: Raw ADC throttle
  get: true
  set: true
  args:
  - type: uint
    units: ''
    required: ''
    min: 0
    max: 4096
    default: ''
- name: adc1_max
  category: adc
  description: ADC1 max val
  get: true
  set: true
  args:
  - type: uint
    units: ''
    required: ''
    min: 0
    max: 4096
    default: ''
- name: adc1_min
  category: adc
  description: ADC1 min val
  get: true
  set: true
  args:
  - type: uint
    units: ''
    required: ''
    min: 0
    max: 4096
    default: ''
- name: adc1_pol
  category: adc
  description: ADC1 polarity
  get: true
  set: true
  args:
  - type: int
    units: ''
    required: ''
    min: -1
    max: 1
    default: ''
- name: adc2_max
  category: adc
  description: ADC2 max val
  get: true
  set: true
  args:
  - type: uint
    units: ''
    required: ''
    min: 0
    max: 4096
    default: ''
- name: adc2_min
  category: adc
  description: ADC2 min val
  get: true
  set: true
  args:
  - type: uint
    units: ''
    required: ''
    min: 0
    max: 4096
    default: ''
- name: adc2_pol
  category: adc
  description: ADC2 polarity
  get: true
  set: true
  args:
  - type: int
    units: ''
    required: ''
    min: -1
    max: 1
    default: ''
- name: can_adc
  category: can
  description: CAN ADC ID  0=disabled
  get: true
  set: true
  args:
  - type: uint
    units: ''
    required: ''
    min: 0
    max: 254
    default: ''
- name: ehz
  category: status
  description: Motor electrical hz
  get: true
  set: false
  args:
  - type: float
    units: ''
    required: ''
    min: ''
    max: ''
    default: ''
- name: error
  category: status
  description: System errors now
  get: true
  set: false
  args:
  - type: uint
    units: ''
    required: ''
    min: 0
    max: 429496729
    default: ''
- name: error_all
  category: status
  description: All errors encountered
  get: true
  set: false
  args:
  - type: uint
    units: ''
    required: ''
    min: 0
    max: 429496729
    default: ''
- name: FOC_Advance
  category: FOC
  description: FOC advance, proportion of 1 PWM
  get: true
  set: true
  args:
  - type: int
    units: ''
    required: ''
    min: -10
    max: 10
    default: ''
- name: FOC_angle
  category: FOC
  description: FOC angle now
  get: true
  set: true
  args:
  - type: uint
    units: ''
    required: ''
    min: 0
    max: 65535
    default: ''
- name: FOC_curr_BW
  category: FOC
  description: Current Controller Bandwidth
  get: true
  set: true
  args:
  - type: uint
    units: ''
    required: ''
    min: 200
    max: 10000
    default: ''
- name: FOC_enc_ang
  category: FOC
  description: Encoder angle now
  get: true
  set: true
  args:
  - type: uint
    units: ''
    required: ''
    min: 0
    max: 65535
    default: ''
- name: FOC_enc_oset
  category: FOC
  description: Encoder alignment angle
  get: true
  set: true
  args:
  - type: uint
    units: ''
    required: ''
    min: 0
    max: 65535
    default: ''
- name: FOC_enc_pol
  category: FOC
  description: Encoder polarity
  get: true
  set: true
  args:
  - type: uint
    units: ''
    required: ''
    min: 0
    max: 1
    default: ''
- name: FOC_enc_PPR
  category: FOC
  description: Encoder ABI PPR
  get: true
  set: true
  args:
  - type: uint
    units: ''
    required: ''
    min: 0
    max: 65535
    default: ''
- name: FOC_flux_gain
  category: FOC
  description: Flux linkage gain
  get: true
  set: true
  args:
  - type: float
    units: ''
    required: ''
    min: 0
    max: 100
    default: ''
- name: FOC_flux_gain
  category: FOC
  description: Flux linkage gain
  get: true
  set: true
  args:
  - type: float
    units: ''
    required: ''
    min: 0
    max: 100
    default: ''
- name: FOC_flux_nlin
  category: FOC
  description: Flux centering gain
  get: true
  set: true
  args:
  - type: uint
    units: ''
    required: ''
    min: 0
    max: 10000
    default: ''
- name: FOC_fpwm
  category: FOC
  description: PWM frequency
  get: true
  set: true
  args:
  - type: uint
    units: ''
    required: ''
    min: 0
    max: 100000
    default: ''
- name: FOC_fw_ehz
  category: FOC
  description: max eHz under field weakening
  get: true
  set: true
  args:
  - type: uint
    units: ''
    required: ''
    min: 0
    max: 6000
    default: ''
- name: FOC_hall_array_ok
  category: FOC
  description: Hall array OK flag (set to 0 to
  get: true
  set: true
  args:
  - type: uint
    units: ''
    required: ''
    min: 0
    max: 1
    default: ''
- name: FOC_hall_iir
  category: FOC
  description: Decay constant for hall preload
  get: true
  set: true
  args:
  - type: float
    units: ''
    required: ''
    min: 0
    max: 1
    default: ''
- name: FOC_hall_Vt
  category: FOC
  description: Hall transition voltage
  get: true
  set: true
  args:
  - type: uint
    units: ''
    required: ''
    min: 0
    max: 100
    default: ''
- name: FOC_hfi_eHz
  category: FOC
  description: HFI Max Frequency
  get: true
  set: true
  args:
  - type: uint
    units: ''
    required: ''
    min: 0
    max: 2000
    default: ''
- name: FOC_hfi_type
  category: FOC
  description: HFI type [0=None, 1=45deg, 2=d
  get: true
  set: true
  args:
  - type: uint
    units: ''
    required: ''
    min: 0
    max: 3
    default: ''
- name: FOC_hfi_volt
  category: FOC
  description: HFI voltage
  get: true
  set: true
  args:
  - type: uint
    units: ''
    required: ''
    min: 0
    max: 50
    default: ''
- name: FOC_Max_Mod
  category: FOC
  description: Max modulation index; ty
  get: true
  set: true
  args:
  - type: float
    units: ''
    required: ''
    min: 0.1
    max: 1.12
    default: ''
- name: FOC_obs_type
  category: FOC
  description: Observer type, 0=None, 1=MXLLa
  get: true
  set: true
  args:
  - type: uint
    units: ''
    required: ''
    min: 0
    max: 4
    default: ''
- name: FOC_ol_step
  category: FOC
  description: Angle per PWM period openloop
  get: true
  set: true
  args:
  - type: uint
    units: ''
    required: ''
    min: 0
    max: 6000
    default: ''
- name: FOC_ortega_gain
  category: FOC
  description: Ortega gain, typically 1M
  get: true
  set: true
  args:
  - type: uint
    units: ''
    required: ''
    min: 1
    max: 100000000
    default: ''
- name: Hall_flux
  category: status
  description: hall start table
  get: true
  set: true
  args:
  - type: int array
    units: ''
    required: ''
    min: -10
    max: 10
    default: ''
- name: id
  category: status
  description: Phase Idq_d smoothed
  get: true
  set: true
  args:
  - type: float
    units: ''
    required: ''
    min: ''
    max: ''
    default: ''
- name: input_opt
  category: input
  description: Inputs [1=ADC1 2=ADC2 4=PPM 8=UART
  get: true
  set: true
  args:
  - type: int
    units: ''
    required: ''
    min: 0
    max: 128
    default: ''
- name: iq
  category: status
  description: Phase Idq_q smoothed
  get: true
  set: true
  args:
  - type: int
    units: ''
    required: ''
    min: ''
    max: ''
    default: ''
- name: iqreq
  category: status
  description: mtr[0].FOC.Idq_req.q
  get: true
  set: true
  args:
  - type: int
    units: ''
    required: ''
    min: -4096
    max: 4096
    default: ''
- name: meas_cl_curr
  category: status
  description: Measuring q closed loop current
  get: true
  set: true
  args:
  - type: float
    units: ''
    required: ''
    min: 0.5
    max: 100
    default: ''
- name: meas_curr
  category: status
  description: Measuring current
  get: true
  set: true
  args:
  - type: float
    units: ''
    required: ''
    min: 0.5
    max: 100
    default: ''
- name: meas_volt
  category: status
  description: Measuring voltage
  get: true
  set: true
  args:
  - type: float
    units: ''
    required: ''
    min: 0.5
    max: 100
    default: ''
- name: node_id
  category: can
  description: Node ID
  get: true
  set: true
  args:
  - type: uint
    units: ''
    required: ''
    min: 1
    max: 254
    default: ''
- name: opt_app_type
  category: opt
  description: App type, 0=none, 1=Vehicle, 2,3 =
  get: true
  set: true
  args:
  - type: uint
    units: ''
    required: ''
    min: 0
    max: 3
    default: ''
- name: opt_circ_lim
  category: opt
  description: Circle limiter [0=OFF, 1=ON,
  get: true
  set: true
  args:
  - type: uint
    units: ''
    required: ''
    min: 0
    max: 2
    default: ''
- name: opt_cont_type
  category: opt
  description: 'Cont type: 0=Torque, 1=Speed,'
  get: true
  set: true
  args:
  - type: uint
    units: ''
    required: ''
    min: 0
    max: 4
    default: ''
- name: opt_fw
  category: opt
  description: Field weakening [0=OFF, 1=ON, 2=ON
  get: true
  set: true
  args:
  - type: uint
    units: ''
    required: ''
    min: 0
    max: 2
    default: ''
- name: opt_hall_start
  category: opt
  description: Use hall start
  get: true
  set: true
  args:
  - type: int
    units: ''
    required: ''
    min: ''
    max: ''
    default: ''
- name: opt_lr_obs
  category: opt
  description: Use LR observer
  get: true
  set: true
  args:
  - type: int
    units: ''
    required: ''
    min: ''
    max: ''
    default: ''
- name: opt_motor_temp
  category: opt
  description: Motor has temperature sensor
  get: true
  set: true
  args:
  - type: int
    units: ''
    required: ''
    min: ''
    max: ''
    default: ''
- name: opt_mtpa
  category: opt
  description: MTPA type = 0=none, 1=setpoint,
  get: true
  set: true
  args:
  - type: uint
    units: ''
    required: ''
    min: 0
    max: 3
    default: ''
- name: opt_phase_bal
  category: opt
  description: Use highhopes phase balancing
  get: true
  set: true
  args:
  - type: int
    units: ''
    required: ''
    min: ''
    max: ''
    default: ''
- name: opt_pwm_type
  category: opt
  description: Modulator [0=SVPWM, 1=sinusoidal,
  get: true
  set: true
  args:
  - type: uint
    units: ''
    required: ''
    min: 0
    max: 3
    default: ''
- name: par_dir
  category: par
  description: Motor direction
  get: true
  set: true
  args:
  - type: uint
    units: ''
    required: ''
    min: 0
    max: 1
    default: ''
- name: par_flux
  category: par
  description: Flux linkage
  get: true
  set: true
  args:
  - type: int
    units: ''
    required: ''
    min: 0
    max: 100
    default: ''
- name: par_fw_curr
  category: par
  description: Max field weakening current
  get: true
  set: true
  args:
  - type: uint
    units: ''
    required: ''
    min: 0
    max: 300
    default: ''
- name: par_i_max
  category: par
  description: Max motor current
  get: true
  set: true
  args:
  - type: uint
    units: ''
    required: ''
    min: 0
    max: 1000
    default: ''
- name: par_i_min
  category: par
  description: Min motor current
  get: true
  set: true
  args:
  - type: int
    units: ''
    required: ''
    min: -1000
    max: 0
    default: ''
- name: par_i_park
  category: par
  description: Max current for handbrake
  get: true
  set: true
  args:
  - type: uint
    units: ''
    required: ''
    min: 0
    max: 300
    default: ''
- name: par_ibat_max
  category: par
  description: Max battery current power
  get: true
  set: true
  args:
  - type: uint
    units: ''
    required: ''
    min: 0
    max: 1000
    default: ''
- name: par_ld
  category: par
  description: Phase inductance
  get: true
  set: true
  args:
  - type: float
    units: ''
    required: ''
    min: 0
    max: 10
    default: ''
- name: par_lq
  category: par
  description: Phase inductance
  get: true
  set: true
  args:
  - type: float
    units: ''
    required: ''
    min: 0
    max: 10
    default: ''
- name: par_motor_sensor
  category: par
  description: 0=SL, 1=Hall, 2=OL, 3=ABSENC, 4=INC_ENC, 5=HFI
  get: true
  set: true
  args:
  - type: uint
    units: ''
    required: ''
    min: 0
    max: 30
    default: ''
- name: par_p_max
  category: par
  description: Max power
  get: true
  set: true
  args:
  - type: uint
    units: ''
    required: ''
    min: 0
    max: 50000
    default: ''
- name: par_pp
  category: par
  description: Motor pole pairs
  get: true
  set: true
  args:
  - type: uint
    units: ''
    required: ''
    min: 0
    max: 255
    default: ''
- name: par_r
  category: par
  description: Phase resistance
  get: true
  set: true
  args:
  - type: float
    units: ''
    required: ''
    min: 0
    max: 10
    default: ''
- name: par_rpm_max
  category: par
  description: Max RPM
  get: true
  set: true
  args:
  - type: int
    units: ''
    required: ''
    min: 0
    max: 300000
    default: ''
- name: par_SL_sensor
  category: par
  description: 0=OL, 1=Hall, 2=PWMENC, 3=HFI
  get: true
  set: true
  args:
  - type: int
    units: ''
    required: ''
    min: 0
    max: 30
    default: ''
- name: password
  category: can
  description: ''
  get: true
  set: true
  args:
  - type: int
    units: ''
    required: ''
    min: ''
    max: ''
    default: ''
- name: safe_count
  category: foc
  description: Live count before allowing
  get: true
  set: true
  args:
  - type: int
    units: ''
    required: ''
    min: 0
    max: 1000
    default: ''
- name: safe_start
  category: foc
  description: Countdown before allowing throttle
  get: true
  set: true
  args:
  - type: int
    units: ''
    required: ''
    min: 0
    max: 1000
    default: ''
- name: speed_ki
  category: foc
  description: amps/Hz integral gain
  get: true
  set: true
  args:
  - type: float
    units: ''
    required: ''
    min: 0
    max: 6000000
    default: ''
- name: speed_kp
  category: foc
  description: amps/Hz proportional gain
  get: true
  set: true
  args:
  - type: float
    units: ''
    required: ''
    min: 0
    max: 6000000
    default: ''
- name: speed_req
  category: foc
  description: Hz
  get: true
  set: true
  args:
  - type: int
    units: ''
    required: ''
    min: 0
    max: 5000
    default: ''
- name: TMOS
  category: status
  description: MOSFET temp, kelvin
  get: true
  set: true
  args:
  - type: float
    units: ''
    required: ''
    min: 0
    max: 4096
    default: ''
- name: TMOT
  category: status
  description: Motor temp, kelvin
  get: true
  set: true
  args:
  - type: float
    units: ''
    required: ''
    min: 0
    max: 4096
    default: ''
- name: uart_dreq
  category: uart
  description: Uart input
  get: true
  set: true
  args:
  - type: int
    units: ''
    required: ''
    min: -1000
    max: 1000
    default: ''
- name: uart_req
  category: uart
  description: Uart input
  get: true
  set: true
  args:
  - type: int
    units: ''
    required: ''
    min: -1000
    max: 1000
    default: ''
- name: vbus
  category: status
  description: Read input voltage
  get: true
  set: false
  args:
  - type: float
    units: ''
    required: ''
    min: 0
    max: ''
    default: ''
- name: Vd
  category: status
  description: FOC_Vdq_d
  get: true
  set: false
  args:
  - type: float
    units: ''
    required: ''
    min: -4096
    max: 4096
    default: ''
- name: Vq
  category: status
  description: FOC_Vdq_q
  get: true
  set: false
  args:
  - type: float
    units: ''
    required: ''
    min: -4096
    max: 4096
    default: ''